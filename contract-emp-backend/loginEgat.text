// login
const { authenticationClient } = require("../middleware/SoapConnector");
let soapClient = "";

const loginUser = async (req, res) => {
  console.log(req.body);
  const { username, password } = req.body;
  console.log(username, password);
  let whereClause;

  if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(username)) {
    whereClause = { email: username };
  } else {
    whereClause = { username: username };
  }

  const userWithIdentifier = await User.findOne({
    where: whereClause,
  }).catch((err) => {
    console.log("Error: ", err);
  });

  if (userWithIdentifier) {
    // return res.json({ message: "Username or email not found!" });

    const passwordMatch = await bcrypt.compare(
      password,
      userWithIdentifier.password);

    if (passwordMatch) {
      const jwtToken = jwt.sign(
        {
          id: userWithIdentifier.id,
          email: userWithIdentifier.email,
          username: userWithIdentifier.username,
          password: userWithIdentifier.password,
          role: userWithIdentifier.role,
        },
        process.env.JWT_SECRET
      );

      return res.json({ message: "Welcome Back", username: username, token: jwtToken, user: {} });
    } else {
      //egat authen
      if (!username || !password) {
        console.log("üê± soapClient create :", { username, password });
        return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
      }
      if (!soapClient) {
        console.log("üê± soapClient create :", { username, password });
        soapClient = await authenticationClient();
      }
      const user = soapClient;

      soapClient.validate_user(
        { a: username, b: password },
        async (errValidateUser, result) => {
          if (errValidateUser) {
            console.error(
              "üòà Error user login soap errValidateUser :",
              errValidateUser
            );
            return res.status(500).send({
              message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏•‡∏≤‡∏á‡πÑ‡∏î‡πâ(2)",
            });
          }

          if (!result) {
            return res
              .status(422)
              .send({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" });
          }

          if (!result.status.$value) {
            return res
              .status(422)
              .send({ message: "‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
          }

          const jwtToken = jwt.sign(
            {
              id: userWithIdentifier.id,
              email: userWithIdentifier.email,
              username: userWithIdentifier.username,
              password: userWithIdentifier.password,
              role: userWithIdentifier.role,
            },
            process.env.JWT_SECRET
          );



          // get hr data from hr api
          let output = await (getHrData(username))
          let person = output.data.result.data[0]
          console.log(person.person_code);
          let userData = {
            emp_id: person.person_code,
            firstname: person.person_thai_thai_firstname,
            lastname: person.person_thai_thai_lastname,
            position: person.person_position,
          }
          return res.json({
            message: "Welcome Back",
            username: username,
            token: jwtToken,
            user: userData
          });

          // return res.send(username,toke);
        }
      );
    }
  } else {
    res.json({ message: "Password does not match!" });
  }

};

const getHrData = async (empn) => {
  let empParam = "work_locations,positions"
  let url = `https://hrapi.egat.co.th/api/v1/persons?filter[PersonCode]=00${empn}&include=${empParam}`;
  let _token = process.env.HR_API_TOKEN
  console.log(url)
  const header = {
    headers: {
      Authorization: "Bearer " + _token, //the token is a variable which holds the token
    },
  };
  let result = '';
  let message = '';
  let status_code = '';

  await axios.get(url, header)
    .then(
      (response) => {
        // console.log(response.data)
        message = '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
          status_code = 200,
          result = response.data
      }


    ).catch((e) => console.log(e))

  if (!result.data) {
    message = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      status_code = 422,
      result = ""
  }
  // console.log(result);
  // data = {
  //   emp_id: result.data[0].person_code,
  //   firstname: result.data[0].person_thai_thai_firstname,

  // }

  // return result;
  let res = {
    message,
    status_code,
    data: { result }
  }
  console.log(res);
  return res;
}