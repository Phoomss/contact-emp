const loginUser = async (req, res) => {
  try {
    const { username, password } = req.body;
    if (!username || !password) {
      console.log("üê± soapClient create :", { username, password });
      return res.status(400).send({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    if (!soapClient) {
      console.log("üê± soapClient create :", { username, password });
      soapClient = await authenticationClient();
    }
    const user = await authenticationClient(username, password);

    if (user) {
      const userData = User.findOne ({
        where: {username:User},
      }).catch((err) => {
        console.log("Error: ", err);
      });

      if (userData) {
        const jwtToken = jwt.sign(
          {
            id: userData.id,
            email: userData.email,
            username: userData.username,
            password: userData.password,
            role: userData.role,
          },
          process.env.JWT_SECRET
        );

        return res.json({message:"Welcome Back",username:username, token:jwtToken});
      } else {
        return res.status(403).send({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á" });
      }
    } else {
      return res.status(422).send({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" });
    }
  } catch (error) {
    console.error("========= Error login", error);
    return res.status(500).send({ message: " Internal Server Error" });
  }
};